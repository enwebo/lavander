'use strict';

/**
 * File js-enabled.js
 *
 * If Javascript is enabled, replace the <body> class "no-js".
 */
document.body.className = document.body.className.replace('no-js', 'js');
'use strict';

/**
 * File login-with-ajax.js
 *
 * Deal with multiple modals and their media.
 */
window.lavanderLoginWithAjax = {};

(function (window, $, app) {
	// Constructor.
	app.init = function () {
		app.cache();

		if (app.meetsRequirements()) {
			app.bindEvents();
		}
	};

	// Cache all the things.
	app.cache = function () {
		app.$c = {
			'body': $('body')
		};
	};

	// Do we meet the requirements?
	app.meetsRequirements = function () {
		return $('.lwa-register').length;
	};

	// Combine all events.
	app.bindEvents = function () {

		// Trigger a modal to open.
		app.$c.body.on('click touchstart', '.register', app.showRegisterForm);

		// Trigger the close button to close the modal.
		app.$c.body.on('click touchstart', '.close', app.closeFrom);

		// Allow the user to close the modal by clicking outside of the modal.
		app.$c.body.on('click touchstart', 'div.modal-open', app.closeModalByClick);
	};

	// Open the modal.
	app.showRegisterForm = function () {

		event.preventDefault();
		// Figure out what we show.
		var $register_form = $(this).parents('.lwa').find('.lwa-register');
		// Display the register form.
		if (register_form.length > 0) {
			alert('');
			event.preventDefault();
			register_form.toggle('slow');
			$(this).parents('.lwa').find('.lwa-remember').toggle('slow');
		}

		// Display the modal.
		$modal.addClass('modal-open');

		// Add body class.
		app.$c.body.addClass('modal-open');
	};

	// Close the modal.
	app.closeFrom = function () {
		// Figure the opened modal we're closing and store the object.
		var $modal = $($('div.modal-open .close').data('target'));

		// Find the iframe in the $modal object.
		var $iframe = $modal.find('iframe');

		// Get the iframe src URL.
		var url = $iframe.attr('src');

		// Remove the source URL, then add it back, so the video can be played again later.
		$iframe.attr('src', '').attr('src', url);

		// Finally, hide the modal.
		$modal.removeClass('modal-open');

		// Remove the body class.
		app.$c.body.removeClass('modal-open');
	};

	// Close if the user clicks outside of the modal
	app.closeModalByClick = function (event) {
		// If the parent container is NOT the modal dialog container, close the modal
		if (!$(event.target).parents('div').hasClass('modal-dialog')) {
			app.closeForm();
		}
	};

	// Engage!
	$(app.init);
})(window, jQuery, window.lavanderLoginWithAjax);
'use strict';

/**
 * file menu.js
 *
 * Mobile Navigation Menu
 */
window.lavanderMobileNav = {};
(function (window, $, app) {
	// Constructor
	app.init = function () {
		app.cache();

		if (app.meetsRequirements()) {
			app.bindEvents();
		}
	};

	// Cache all the things
	app.cache = function () {
		app.$c = {
			'window': $(window),
			'body': $('body'),
			'navMenuContainer': $('.menu')
		};
	};

	// Combine all events
	app.bindEvents = function () {

		// Show more items when the "more" item is clicked.
		app.$c.body.on('click', '.menu-btn', app.displayMenu);

		// Add the more classes when hovering a parent menu item.
		app.$c.body.on('click', '.menu .menu-item-has-children > a', app.setSecondClick);

		// Hide the menu when the close button is clicked.
		app.$c.body.on('click', '.close-menu', app.hideMenu);
	};

	// Do we meet the requirements?
	app.meetsRequirements = function () {
		return app.$c.navMenuContainer.length;
	};

	// Toggle the menu items on a click of the "more" link.
	app.displayMenu = function (event) {
		event.preventDefault();

		// Hide the menu if it's already opened
		if (app.$c.body.hasClass('menu-more') && !app.$c.body.hasClass('sub-menu-more')) {
			app.removeMenuClasses();
			return;
		}

		// Remove any instances of classes already in place.
		// This makes sure we can click to switch between submenus.
		app.removeMenuClasses();

		app.$c.navMenuContainer.toggleClass('more');
		app.$c.body.toggleClass('menu-more');
	};

	// Let the submenu parent be a normal link on the second click
	app.setSecondClick = function (event) {
		// Check to see if this parent has the visible class
		if (!$(this).parent('li').hasClass('visible')) {
			// Don't let the link fire as a normal link
			event.preventDefault();
		}

		// Remove any instances of classes already in place
		// This makes sure we can click to switch between submenus
		app.removeMenuClasses();

		// Toggle the class to display the submenu
		$(this).parent('li').toggleClass('visible');

		// Add our "more" classes as we do when clicking the "More" link
		app.$c.navMenuContainer.toggleClass('more');
		app.$c.body.toggleClass('menu-more sub-menu-more');
	};

	// Hide the menu items
	app.hideMenu = function () {
		app.removeMenuClasses();
	};

	app.removeMenuClasses = function () {
		// Remove any instances of classes already in place
		// This makes sure we can click to switch between submenus
		app.$c.body.removeClass('menu-more');
		app.$c.navMenuContainer.removeClass('visible');
		// $( '.menu-item-has-children' ).removeClass( 'visible' );
	};

	// Engage
	$(app.init);
})(window, jQuery, window.lavanderMobileNav);
'use strict';

/**
 * File modal.js
 *
 * Deal with multiple modals and their media.
 */
window.lavanderModal = {};

(function (window, $, app) {
	// Constructor.
	app.init = function () {
		app.cache();

		if (app.meetsRequirements()) {
			app.bindEvents();
		}
	};

	// Cache all the things.
	app.cache = function () {
		app.$c = {
			'body': $('body')
		};
	};

	// Do we meet the requirements?
	app.meetsRequirements = function () {
		return $('.modal-trigger').length;
	};

	// Combine all events.
	app.bindEvents = function () {
		// Trigger a modal to open.
		app.$c.body.on('click touchstart', '.modal-trigger', app.openModal);

		// Trigger the close button to close the modal.
		app.$c.body.on('click touchstart', '.close', app.closeModal);

		// Allow the user to close the modal by hitting the esc key.
		app.$c.body.on('keydown', app.escKeyClose);

		// Allow the user to close the modal by clicking outside of the modal.
		app.$c.body.on('click touchstart', 'div.modal-open', app.closeModalByClick);
	};

	// Open the modal.
	app.openModal = function () {
		// Figure out which modal we're opening and store the object.
		var $modal = $($(this).data('target'));

		// Display the modal.
		$modal.addClass('modal-open');

		// Add body class.
		app.$c.body.addClass('modal-open');
	};

	// Close the modal.
	app.closeModal = function () {
		// Figure the opened modal we're closing and store the object.
		var $modal = $($('div.modal-open .close').data('target'));

		// Find the iframe in the $modal object.
		var $iframe = $modal.find('iframe');

		// Get the iframe src URL.
		var url = $iframe.attr('src');

		// Remove the source URL, then add it back, so the video can be played again later.
		$iframe.attr('src', '').attr('src', url);

		// Finally, hide the modal.
		$modal.removeClass('modal-open');

		// Remove the body class.
		app.$c.body.removeClass('modal-open');
	};

	// Close if "esc" key is pressed.
	app.escKeyClose = function (event) {
		if (27 === event.keyCode) {
			app.closeModal();
		}
	};

	// Close if the user clicks outside of the modal
	app.closeModalByClick = function (event) {
		// If the parent container is NOT the modal dialog container, close the modal
		if (!$(event.target).parents('div').hasClass('modal-dialog')) {
			app.closeModal();
		}
	};

	// Engage!
	$(app.init);
})(window, jQuery, window.lavanderModal);
'use strict';

/**
 * File search.js
 *
 * Deal with the search form.
 */
window.lavanderSearch = {};

(function (window, $, app) {
	// Constructor.
	app.init = function () {
		app.cache();

		if (app.meetsRequirements()) {
			app.bindEvents();
		}
	};

	// Cache all the things.
	app.cache = function () {
		app.$c = {
			'body': $('body')
		};
	};

	// Do we meet the requirements?
	app.meetsRequirements = function () {
		return $('.search-field').length;
	};

	// Combine all events.
	app.bindEvents = function () {
		// Remove placeholder text from search field on focus.
		app.$c.body.on('focus', '.search-field', app.removePlaceholderText);

		// Add placeholder text back to search field on blur.
		app.$c.body.on('blur', '.search-field', app.addPlaceholderText);
	};

	// Remove placeholder text from search field.
	app.removePlaceholderText = function () {
		var $search_field = $(this);

		$search_field.data('placeholder', $search_field.attr('placeholder')).attr('placeholder', '');
	};

	// Replace placeholder text from search field.
	app.addPlaceholderText = function () {
		var $search_field = $(this);

		$search_field.attr('placeholder', $search_field.data('placeholder')).data('placeholder', '');
	};

	// Engage!
	$(app.init);
})(window, jQuery, window.lavanderSearch);
'use strict';

/**
 * File skip-link-focus-fix.js.
 *
 * Helps with accessibility for keyboard only users.
 *
 * Learn more: https://git.io/vWdr2
 */
(function () {
	var isWebkit = navigator.userAgent.toLowerCase().indexOf('webkit') > -1,
	    isOpera = navigator.userAgent.toLowerCase().indexOf('opera') > -1,
	    isIe = navigator.userAgent.toLowerCase().indexOf('msie') > -1;

	if ((isWebkit || isOpera || isIe) && document.getElementById && window.addEventListener) {
		window.addEventListener('hashchange', function () {
			var id = location.hash.substring(1),
			    element;

			if (!/^[A-z0-9_-]+$/.test(id)) {
				return;
			}

			element = document.getElementById(id);

			if (element) {
				if (!/^(?:a|select|input|button|textarea)$/i.test(element.tagName)) {
					element.tabIndex = -1;
				}

				element.focus();
			}
		}, false);
	}
})();
'use strict';

/**
 * File window-ready.js
 *
 * Add a "ready" class to <body> when window is ready.
 */
window.lavanderWindowReady = {};
(function (window, $, app) {
	// Constructor.
	app.init = function () {
		app.cache();
		app.bindEvents();
	};

	// Cache document elements.
	app.cache = function () {
		app.$c = {
			'window': $(window),
			'body': $(document.body)
		};
	};

	// Combine all events.
	app.bindEvents = function () {
		app.$c.window.load(app.addBodyClass);
	};

	// Add a class to <body>.
	app.addBodyClass = function () {
		app.$c.body.addClass('ready');
	};

	// Engage!
	$(app.init);
})(window, jQuery, window.lavanderWindowReady);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
